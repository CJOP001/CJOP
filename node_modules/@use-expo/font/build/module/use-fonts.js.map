{"version":3,"sources":["use-fonts.ts"],"names":["useEffect","useState","loadAsync","useFonts","map","loaded","setLoaded","then"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAAqBC,SAArB,QAAsC,WAAtC;AAEA;;;;;;;;;;;AAUA,OAAO,SAASC,QAAT,CAAkBC,GAAlB,EAA2C;AACjD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,KAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACfE,IAAAA,SAAS,CAACE,GAAD,CAAT,CAAeG,IAAf,CAAoB,MAAMD,SAAS,CAAC,IAAD,CAAnC;AACA,GAFQ,EAEN,EAFM,CAAT,CAHiD,CAKzC;AAER;AACA;AACA;;AAEA,SAAO,CAACD,MAAD,CAAP;AACA","sourcesContent":["import { useEffect, useState } from 'react';\nimport { FontSource, loadAsync } from 'expo-font';\n\n/**\n * Load a map of custom fonts to use in textual elements.\n * The map keys are used as font names, and can be used with `fontFamily: <name>;`.\n * It returns a boolean describing if all fonts are loaded.\n *\n * Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n *\n * @see https://docs.expo.io/versions/latest/sdk/font/\n * @example const [isLoaded] = useFonts(...);\n */\nexport function useFonts(map: FontMap): [boolean] {\n\tconst [loaded, setLoaded] = useState(false);\n\n\tuseEffect(() => {\n\t\tloadAsync(map).then(() => setLoaded(true))\n\t}, []); // eslint-disable-line\n\n\t// note: to avoid any ambiguity fonts are only loaded once\n\t// since every rerender is a new object, we have no way of\n\t// detecting a new map and updating the loaded state based on that\n\n\treturn [loaded];\n}\n\ninterface FontMap {\n\t[name: string]: FontSource;\n}\n"]}