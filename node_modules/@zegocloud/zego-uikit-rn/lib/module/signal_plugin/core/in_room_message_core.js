var _class;
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { ZIMConversationType, ZIMMessageType } from 'zego-zim-react-native';
import { zlogerror, zloginfo } from '../utils/logger';
import ZegoUIKitCorePlugin from "../../components/internal/ZegoUIKitCorePlugin";
export default class ZegoPluginRoomMessageCore {
  constructor() {
    _defineProperty(this, "_onInRoomTextMessageReceivedCallbackMap", {});
    _defineProperty(this, "_onInRoomCommandMessageReceivedCallbackMap", {});
    if (!ZegoPluginRoomMessageCore.shared) {
      ZegoPluginRoomMessageCore.shared = this;
    }
    return ZegoPluginRoomMessageCore.shared;
  }
  static getInstance() {
    if (!ZegoPluginRoomMessageCore.shared) {
      ZegoPluginRoomMessageCore.shared = new ZegoPluginRoomMessageCore();
    }
    return ZegoPluginRoomMessageCore.shared;
  }
  _registerEngineCallback() {
    ZegoUIKitCorePlugin.getZIMPlugin().default.getInstance().on('receiveRoomMessage', (zim, _ref) => {
      let {
        messageList,
        fromConversationID
      } = _ref;
      zloginfo('[Core][receiveRoomMessage callback]', messageList, fromConversationID);
      for (const message of messageList) {
        if (message.type === ZIMMessageType.Command) {
          const command = message;
          var commandMessage;
          if (command.message instanceof Uint8Array) {
            commandMessage = command.message;
          } else {
            commandMessage = Object.values(command.message);
          }
          var jsonText = decodeURIComponent(escape(String.fromCharCode(...Array.from(commandMessage))));
          const notifyData = {
            message: jsonText,
            roomID: fromConversationID,
            senderUserID: message.senderUserID,
            timestamp: message.timestamp
          };
          this._notifyInRoomCommandMessageReceived(notifyData);
        } else if (message.type === ZIMMessageType.Text) {
          const textMessage = message;
          const notifyData = {
            message: textMessage.message,
            roomID: fromConversationID,
            senderUserID: message.senderUserID,
            timestamp: message.timestamp
          };
          this._notifyInRoomTextMessageReceived(notifyData);
        }
      }
    });
    zloginfo('[ZegoPluginRoomMessageCore]Register callback for ZIM...');
  }
  _unregisterEngineCallback() {
    zloginfo('[ZegoPluginRoomMessageCore]Unregister callback from ZIM...');
    ZegoUIKitCorePlugin.getZIMPlugin().default.getInstance().off('receiveRoomMessage');
  }
  _notifyInRoomTextMessageReceived(notifyData) {
    zloginfo(`[Core]NotifyInRoomTextMessageReceived, data: ${notifyData}`);
    Object.keys(this._onInRoomTextMessageReceivedCallbackMap).forEach(callbackID => {
      if (this._onInRoomTextMessageReceivedCallbackMap[callbackID]) {
        this._onInRoomTextMessageReceivedCallbackMap[callbackID](notifyData);
      }
    });
  }
  _notifyInRoomCommandMessageReceived(notifyData) {
    zloginfo(`[Core]NotifyInRoomCommandMessageReceived, data: ${notifyData}`);
    Object.keys(this._onInRoomCommandMessageReceivedCallbackMap).forEach(callbackID => {
      if (this._onInRoomCommandMessageReceivedCallbackMap[callbackID]) {
        this._onInRoomCommandMessageReceivedCallbackMap[callbackID](notifyData);
      }
    });
  }
  sendInRoomTextMessage(roomID, message) {
    return new Promise((resolve, reject) => {
      const textMessage = {
        type: ZIMMessageType.Text,
        message: message
      };
      ZegoUIKitCorePlugin.getZIMPlugin().default.getInstance().sendMessage(textMessage, roomID, ZIMConversationType.Room, {
        priority: 1
      }).then(_ref2 => {
        let {
          message
        } = _ref2;
        zloginfo(`[Core]sendInRoomTextMessage done, roomID: ${roomID}, message: ${message}`);
        resolve();
      }).catch(error => {
        reject(error);
      });
    });
  }
  sendInRoomCommandMessage(roomID, message) {
    var command = new Uint8Array(Array.from(unescape(encodeURIComponent(message))).map(val => val.charCodeAt(0)));
    return new Promise((resolve, reject) => {
      const commandMessage = {
        type: ZIMMessageType.Command,
        message: command
      };
      ZegoUIKitCorePlugin.getZIMPlugin().default.getInstance().sendMessage(commandMessage, roomID, ZIMConversationType.Room, {
        priority: 1
      }).then(_ref3 => {
        let {
          message
        } = _ref3;
        zloginfo(`[Core]sendInRoomCommandMessage done, roomID: ${roomID}, message: ${message}`);
        resolve();
      }).catch(error => {
        reject(error);
      });
    });
  }
  onInRoomTextMessageReceived(callbackID, callback) {
    if (!ZegoUIKitCorePlugin.getZIMPlugin().default.getInstance()) {
      zlogerror('[ZegoPluginRoomPropertiesCore]Please initialize it first.');
    }
    if (typeof callback !== 'function') {
      if (callbackID in this._onInRoomTextMessageReceivedCallbackMap) {
        zloginfo('[Core][onRoomPropertyUpdated] Remove callback for: [', callbackID, '] because callback is not a valid function!');
        delete this._onInRoomTextMessageReceivedCallbackMap[callbackID];
      }
    } else {
      this._onInRoomTextMessageReceivedCallbackMap[callbackID] = callback;
    }
  }
  onInRoomCommandMessageReceived(callbackID, callback) {
    if (typeof callback !== 'function') {
      if (callbackID in this._onInRoomCommandMessageReceivedCallbackMap) {
        zloginfo('[Core][onInRoomCommandMessageReceived] Remove callback for: [', callbackID, '] because callback is not a valid function!');
        delete this._onInRoomCommandMessageReceivedCallbackMap[callbackID];
      }
    } else {
      this._onInRoomCommandMessageReceivedCallbackMap[callbackID] = callback;
    }
  }
}
_class = ZegoPluginRoomMessageCore;
_defineProperty(ZegoPluginRoomMessageCore, "shared", void 0);
//# sourceMappingURL=in_room_message_core.js.map